#include <iostream>
using namespace std;

class Matrix2x2;

class MatrixHelper {
public:
    void updateElement(Matrix2x2& mat, int row, int col, int value);
};

class Matrix2x2 {
private:
    int data[2][2];
public:
    Matrix2x2(int a = 0, int b = 0, int c = 0, int d = 0) {
        data[0][0] = a;
        data[0][1] = b;
        data[1][0] = c;
        data[1][1] = d;
    }

    Matrix2x2 operator+(const Matrix2x2& other) {
        return Matrix2x2(
            data[0][0] + other.data[0][0],
            data[0][1] + other.data[0][1],
            data[1][0] + other.data[1][0],
            data[1][1] + other.data[1][1]
        );
    }

    Matrix2x2 operator-(const Matrix2x2& other) {
        return Matrix2x2(
            data[0][0] - other.data[0][0],
            data[0][1] - other.data[0][1],
            data[1][0] - other.data[1][0],
            data[1][1] - other.data[1][1]
        );
    }

    Matrix2x2 operator*(const Matrix2x2& other) {
        int a = data[0][0]*other.data[0][0] + data[0][1]*other.data[1][0];
        int b = data[0][0]*other.data[0][1] + data[0][1]*other.data[1][1];
        int c = data[1][0]*other.data[0][0] + data[1][1]*other.data[1][0];
        int d = data[1][0]*other.data[0][1] + data[1][1]*other.data[1][1];
        return Matrix2x2(a, b, c, d);
    }

    friend int determinant(const Matrix2x2& m);
    friend class MatrixHelper;

    friend ostream& operator<<(ostream& os, const Matrix2x2& m) {
        os << m.data[0][0] << " " << m.data[0][1] << endl;
        os << m.data[1][0] << " " << m.data[1][1];
        return os;
    }
};

void MatrixHelper::updateElement(Matrix2x2& mat, int row, int col, int value) {
    if (row >= 0 && row < 2 && col >= 0 && col < 2) {
        mat.data[row][col] = value;
    }
}

int determinant(const Matrix2x2& m) {
    return m.data[0][0] * m.data[1][1] - m.data[0][1] * m.data[1][0];
}

int main() {
    Matrix2x2 m1(1, 2, 3, 4);
    Matrix2x2 m2(5, 6, 7, 8);

    Matrix2x2 sum = m1 + m2;
    Matrix2x2 diff = m1 - m2;
    Matrix2x2 prod = m1 * m2;

    cout << "Sum:" << endl << sum << endl;
    cout << "Difference:" << endl << diff << endl;
    cout << "Product:" << endl << prod << endl;

    cout << "Determinant of m1: " << determinant(m1) << endl;

    MatrixHelper helper;
    helper.updateElement(m1, 0, 0, 9);
    cout << "Updated m1:" << endl << m1 << endl;

    return 0;
}