#include <iostream>
#include <stdexcept>
#include <exception>

class QueueOverflowException : public std::exception {};
class QueueUnderflowException : public std::exception {};

template <typename T>
class Queue {
private:
    T* data;
    int capacity;
    int front, rear;

public:
    Queue(int cap) : capacity(cap), front(0), rear(0) {
        data = new T[capacity];
    }

    ~Queue() {
        delete[] data;
    }

    void enqueue(const T& item) {
        if (rear == capacity) {
            throw QueueOverflowException();
        }
        data[rear++] = item;
    }

    T dequeue() {
        if (front == rear) {
            throw QueueUnderflowException();
        }
        return data[front++];
    }
};

int main() {
    try {
        Queue<int> q(3);
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        q.enqueue(4); 
    } catch (const QueueOverflowException& e) {
        std::cout << "Caught QueueOverflowException - what(): " << e.what() << std::endl;
    }

    try {
        Queue<int> q(3);
        q.dequeue(); 
    } catch (const QueueUnderflowException& e) {
        std::cout << "Caught QueueUnderflowException - what(): " << e.what() << std::endl;
    }
}
