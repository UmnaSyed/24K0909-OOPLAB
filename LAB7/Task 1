#include <iostream>
#include <string>
using namespace std;

class Device {
protected:
    string deviceID;
    string deviceName;
    bool status;
    string location;

public:
    Device(string id, string name, string loc) 
        : deviceID(id), deviceName(name), location(loc), status(false) {}

    virtual void turnOn() { 
        status = true; 
        cout << deviceName << " turned on." << endl;
    }
    
    virtual void turnOff() { 
        status = false; 
        cout << deviceName << " turned off." << endl;
    }
    
    virtual string getStatus() {
        return status ? "On" : "Off";
    }
    
    virtual void displayInfo() {
        cout << "\nDevice Information:" << endl;
        cout << "ID: " << deviceID << endl;
        cout << "Name: " << deviceName << endl;
        cout << "Location: " << location << endl;
        cout << "Status: " << getStatus() << endl;
    }
};

class Light : public Device {
private:
    int brightnessLevel;
    string colorMode;

public:
    Light(string id, string name, string loc, int brightness, string color) 
        : Device(id, name, loc), brightnessLevel(brightness), colorMode(color) {}

    void displayInfo() override {
        Device::displayInfo();
        cout << "Brightness: " << brightnessLevel << "%" << endl;
        cout << "Color Mode: " << colorMode << endl;
    }
};

class Thermostat : public Device {
private:
    float temperature;
    string mode;
    float targetTemperature;

public:
    Thermostat(string id, string name, string loc, float temp, string m, float target) 
        : Device(id, name, loc), temperature(temp), mode(m), targetTemperature(target) {}

    string getStatus() override {
        return "Current Temp: " + to_string(temperature) + "°C, Target: " + to_string(targetTemperature) + "°C";
    }
};

class SecurityCamera : public Device {
private:
    string resolution;
    bool recordingStatus;
    bool nightVisionEnabled;

public:
    SecurityCamera(string id, string name, string loc, string res, bool nightVision) 
        : Device(id, name, loc), resolution(res), nightVisionEnabled(nightVision), recordingStatus(false) {}

    void turnOn() override {
        Device::turnOn();
        recordingStatus = true;
        cout << "Recording started." << endl;
    }

    void displayInfo() override {
        Device::displayInfo();
        cout << "Resolution: " << resolution << endl;
        cout << "Night Vision: " << (nightVisionEnabled ? "Enabled" : "Disabled") << endl;
        cout << "Recording: " << (recordingStatus ? "Active" : "Inactive") << endl;
    }
};

class SmartPlug : public Device {
private:
    float powerConsumption;
    int timerSetting;

public:
    SmartPlug(string id, string name, string loc, float power, int timer) 
        : Device(id, name, loc), powerConsumption(power), timerSetting(timer) {}

    void turnOff() override {
        Device::turnOff();
        cout << "Logged power usage: " << powerConsumption << " kWh" << endl;
    }

    void displayInfo() override {
        Device::displayInfo();
        cout << "Power Consumption: " << powerConsumption << " kWh" << endl;
        cout << "Timer Setting: " << timerSetting << " minutes" << endl;
    }
};

int main() {

    Light livingRoomLight("L1", "Living Room Light", "Living Room", 75, "Warm White");
    Thermostat livingRoomThermo("T1", "Living Room Thermostat", "Living Room", 22.5, "Heating", 23.0);
    SecurityCamera frontDoorCam("C1", "Front Door Camera", "Front Door", "1080p", true);
    SmartPlug kitchenPlug("P1", "Kitchen Smart Plug", "Kitchen", 2.5, 60);

    cout << "\nTesting Light:" << endl;
    livingRoomLight.turnOn();
    livingRoomLight.displayInfo();
    livingRoomLight.turnOff();

    cout << "\nTesting Thermostat:" << endl;
    livingRoomThermo.turnOn();
    livingRoomThermo.displayInfo();
    cout << "Status: " << livingRoomThermo.getStatus() << endl;

    cout << "\nTesting Security Camera:" << endl;
    frontDoorCam.turnOn();
    frontDoorCam.displayInfo();

    cout << "\nTesting Smart Plug:" << endl;
    kitchenPlug.turnOn();
    kitchenPlug.displayInfo();
    kitchenPlug.turnOff();

    return 0;
}
